##################################
-- DATA CLEANING
##################################

-- check for missing values 

SELECT * FROM Product WHERE brand IS NULL; -- 24 missing values
SELECT * FROM Product WHERE name IS NOT NULL; -- 2 missing values
SELECT * FROM customer WHERE city IS NULL;    -- 140 rows

/* since i don't need name of the product and city that much, 
i'm not making any changes on these columes */

-- Handling missing values

UPDATE product
SET brand = 'other'
WHERE brand IS NULL AND product_id is not null;

-- check for duplicates
-- There are no Duplicates in these tables
SELECT state, count(*)
FROM state_mapping
GROUP BY state
having count(*) > 1;

SELECT product_id, count(*)
FROM product
GROUP BY product_id
having count(*) > 1;

SELECT order_item_id, count(*)
FROM orders
GROUP BY order_item_id
having count(*) > 1;

SELECT customer_id, count(*)
FROM customer
GROUP BY customer_id
having count(*) > 1;

##################################
-- DATA EXPLORATION
##################################

/* Since the data is clean
let's move on to data exploration */

-- Find the count of products for each brand.

SELECT brand, COUNT(*) AS product_count
FROM product
GROUP BY brand;

-- Find the average price of products in the product table.

SELECT AVG(retail_price) AS avg_price
FROM product;

SELECT AVG(cost) AS avg_cost
FROM product;

-- List the top 5 products by total sales amount (i.e., quantity sold multiplied by price).

SELECT p.name, SUM(o.quantity * o.retail_price) AS total_sales
FROM orders o
JOIN product p ON o.product_id = p.product_id
GROUP BY p.name
ORDER BY total_sales DESC
LIMIT 5;

-- Find the number of orders placed by each customer.

SELECT c.customer_id, COUNT(*) AS total_orders
FROM orders o
JOIN customer c ON o.customer_id = c.customer_id
GROUP BY c.customer_id;

-- Find the total sales for each state (assuming state is stored in the customers table).

SELECT c.state, SUM(o.quantity * o.retail_price) AS total_sales
FROM orders o
JOIN customer c ON o.customer_id = c.customer_id
GROUP BY c.state;

-- Calculate the total revenue generated by each product (quantity sold * price).

select p.product_id, sum(o.quantity * o.retail_price) as revenue from product p
join orders o on p.product_id = o.product_id
group by p.product_id;

-- Identify the product that has the highest quantity sold.

select p.product_id, sum(o.quantity) as total_quantity from product p
join orders o on p.product_id = o.product_id
group by p.product_id
order by total_quantity desc
limit 1;

-- Calculate the average spending of each customer.

SELECT c.customer_id, AVG(o.quantity * o.retail_price) AS avg_spending
FROM orders o
JOIN customer c ON o.customer_id = c.customer_id
GROUP BY c.customer_id;

-- Find the number of different products each customer has purchased.

SELECT c.customer_id, count(distinct o.product_id) AS no_of_products
FROM orders o
JOIN customer c ON o.customer_id = c.customer_id
GROUP BY c.customer_id
order by c.customer_id;

/* Group products by price ranges (e.g., below $50, $50-$100, etc.) and 
count the number of products in each range. */

select count(*) as product_count,
(case when retail_price < 50 then 'below_50'
when retail_price >= 50 and retail_price < 100 then 'bet_50_and_100'
when retail_price >= 100 and retail_price < 200 then 'bet_100_and_200'
when retail_price >= 200 and retail_price < 500 then 'bet_200_and_500'
when retail_price >= 500 then 'above_500' end) as price_range
from product
group by price_range;

-- Find the total quantity sold for each brand.

select p.brand, sum(o.quantity) from orders o
join product p on o.product_id = p.product_id
group by p.brand;

-- Find the number of orders placed in each month.

select month(transaction_date) as month, count(*) from orders
group by month
order by month;

-- Identify customers who have not placed any orders.
select customer_id from customer 
where customer_id not in
(select customer_id from orders);

-- Find the product with the highest price in the product table.

select product_id, brand, name, retail_price from product
where retail_price = (select max(retail_price) from product);

-- Calculate the total revenue for all products in a specific category.
select p.category, sum(o.quantity * o.retail_price) as revenue from orders o
join product p on o.product_id = p.product_id
group by p.category;

-- Top 5 Customers by Total Spending (Sum of Retail Price)

SELECT C.CUSTOMER_ID, SUM(O.QUANTITY * O.RETAIL_PRICE) AS TOTAL_SPENDING FROM CUSTOMER C
JOIN ORDERS O ON C.CUSTOMER_ID = O.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID
ORDER BY TOTAL_SPENDING DESC
LIMIT 5;

-- Monthly Sales Trends (Total Retail Price per Month)

SELECT YEAR(TRANSACTION_DATE) AS YEAR, MONTH(TRANSACTION_DATE) AS MONTH, ROUND(SUM(RETAIL_PRICE)) AS TOTAL_SALES FROM ORDERS
GROUP BY YEAR(TRANSACTION_DATE), MONTH(O.TRANSACTION_DATE)
ORDER BY YEAR(TRANSACTION_DATE), MONTH(O.TRANSACTION_DATE);

-- Monthly Sales by State

SELECT C.STATE, YEAR(O.TRANSACTION_DATE) AS YEAR, MONTH(O.TRANSACTION_DATE) AS MONTH, SUM(O.SALES)
FROM ORDERS O
JOIN CUSTOMER C ON O.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY C.STATE, YEAR(O.TRANSACTION_DATE), MONTH(O.TRANSACTION_DATE)
ORDER BY C.STATE, YEAR(O.TRANSACTION_DATE), MONTH(O.TRANSACTION_DATE) DESC;


